{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { addPointerEvent, usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { addDomEvent, useDomEvent } from '../events/use-dom-event.mjs';\nimport { extractEventInfo } from '../events/event-info.mjs';\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_ref) {\n  let {\n    onTap,\n    onTapStart,\n    onTapCancel,\n    whileTap,\n    visualElement,\n    ...props\n  } = _ref;\n  const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n  const isPressing = useRef(false);\n  const cancelPointerEndListeners = useRef(null);\n  /**\n   * Only set listener to passive if there are no external listeners.\n   */\n  const eventOptions = {\n    passive: !(onTapStart || onTap || onTapCancel || props[\"onPointerDown\"])\n  };\n  function removePointerEndListener() {\n    cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n    cancelPointerEndListeners.current = null;\n  }\n  function checkPointerEnd() {\n    removePointerEndListener();\n    isPressing.current = false;\n    const latestProps = visualElement.getProps();\n    if (latestProps.whileTap && visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Tap, false);\n    }\n    return !isDragActive();\n  }\n  function onPointerUp(event, info) {\n    var _a, _b, _c, _d;\n    if (!checkPointerEnd()) return;\n    /**\n     * We only count this as a tap gesture if the event.target is the same\n     * as, or a child of, this component's element\n     */\n    !isNodeOrChild(visualElement.current, event.target) ? (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info) : (_d = (_c = visualElement.getProps()).onTap) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n  }\n  function onPointerCancel(event, info) {\n    var _a, _b;\n    if (!checkPointerEnd()) return;\n    (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n  }\n  function onPointerStart(event, info) {\n    var _a;\n    const latestProps = visualElement.getProps();\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n    if (latestProps.whileTap && visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Tap, true);\n    }\n    (_a = latestProps.onTapStart) === null || _a === void 0 ? void 0 : _a.call(latestProps, event, info);\n  }\n  const callbackDependencies = [Boolean(onTapStart), Boolean(onTap), Boolean(whileTap), visualElement];\n  const startPress = useCallback((event, info) => {\n    removePointerEndListener();\n    if (isPressing.current) return;\n    isPressing.current = true;\n    cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n    onPointerStart(event, info);\n  }, callbackDependencies);\n  usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? startPress : undefined, eventOptions);\n  const startAccessiblePress = useCallback(() => {\n    const stopKeydownListener = addDomEvent(visualElement.current, \"keydown\", event => {\n      if (event.key !== \"Enter\" || isPressing.current) return;\n      isPressing.current = true;\n      cancelPointerEndListeners.current = addDomEvent(visualElement.current, \"keyup\", () => {\n        if (event.key !== \"Enter\" || !checkPointerEnd()) return;\n        fireSyntheticPointerEvent(\"up\", visualElement.getProps().onTap);\n      }, eventOptions);\n      fireSyntheticPointerEvent(\"down\", onPointerStart);\n    });\n    const stopBlurListener = addDomEvent(visualElement.current, \"blur\", () => {\n      stopKeydownListener();\n      stopBlurListener();\n      if (isPressing.current) {\n        fireSyntheticPointerEvent(\"cancel\", onPointerCancel);\n      }\n    });\n  }, callbackDependencies);\n  useDomEvent(visualElement, \"focus\", hasPressListeners ? startAccessiblePress : undefined);\n  useUnmountEffect(removePointerEndListener);\n}\nexport { useTapGesture };","map":{"version":3,"names":["useRef","useCallback","isNodeOrChild","addPointerEvent","usePointerEvent","useUnmountEffect","AnimationType","isDragActive","pipe","addDomEvent","useDomEvent","extractEventInfo","fireSyntheticPointerEvent","name","handler","syntheticPointerEvent","PointerEvent","useTapGesture","onTap","onTapStart","onTapCancel","whileTap","visualElement","props","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","passive","removePointerEndListener","current","checkPointerEnd","latestProps","getProps","animationState","setActive","Tap","onPointerUp","event","info","_a","_b","_c","_d","target","call","onPointerCancel","onPointerStart","callbackDependencies","Boolean","startPress","window","undefined","startAccessiblePress","stopKeydownListener","key","stopBlurListener"],"sources":["/Users/vladyslav/Desktop/jasmine/frontend_jasmine/node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs"],"sourcesContent":["import { useRef, useCallback } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { addPointerEvent, usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { addDomEvent, useDomEvent } from '../events/use-dom-event.mjs';\nimport { extractEventInfo } from '../events/event-info.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture({ onTap, onTapStart, onTapCancel, whileTap, visualElement, ...props }) {\n    const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    const isPressing = useRef(false);\n    const cancelPointerEndListeners = useRef(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */\n    const eventOptions = {\n        passive: !(onTapStart ||\n            onTap ||\n            onTapCancel ||\n            props[\"onPointerDown\"]),\n    };\n    function removePointerEndListener() {\n        cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        removePointerEndListener();\n        isPressing.current = false;\n        const latestProps = visualElement.getProps();\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, false);\n        }\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        var _a, _b, _c, _d;\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.current, event.target)\n            ? (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info)\n            : (_d = (_c = visualElement.getProps()).onTap) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n    }\n    function onPointerCancel(event, info) {\n        var _a, _b;\n        if (!checkPointerEnd())\n            return;\n        (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n    }\n    function onPointerStart(event, info) {\n        var _a;\n        const latestProps = visualElement.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, true);\n        }\n        (_a = latestProps.onTapStart) === null || _a === void 0 ? void 0 : _a.call(latestProps, event, info);\n    }\n    const callbackDependencies = [\n        Boolean(onTapStart),\n        Boolean(onTap),\n        Boolean(whileTap),\n        visualElement,\n    ];\n    const startPress = useCallback((event, info) => {\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n        onPointerStart(event, info);\n    }, callbackDependencies);\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? startPress : undefined, eventOptions);\n    const startAccessiblePress = useCallback(() => {\n        const stopKeydownListener = addDomEvent(visualElement.current, \"keydown\", (event) => {\n            if (event.key !== \"Enter\" || isPressing.current)\n                return;\n            isPressing.current = true;\n            cancelPointerEndListeners.current = addDomEvent(visualElement.current, \"keyup\", () => {\n                if (event.key !== \"Enter\" || !checkPointerEnd())\n                    return;\n                fireSyntheticPointerEvent(\"up\", visualElement.getProps().onTap);\n            }, eventOptions);\n            fireSyntheticPointerEvent(\"down\", onPointerStart);\n        });\n        const stopBlurListener = addDomEvent(visualElement.current, \"blur\", () => {\n            stopKeydownListener();\n            stopBlurListener();\n            if (isPressing.current) {\n                fireSyntheticPointerEvent(\"cancel\", onPointerCancel);\n            }\n        });\n    }, callbackDependencies);\n    useDomEvent(visualElement, \"focus\", hasPressListeners ? startAccessiblePress : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}